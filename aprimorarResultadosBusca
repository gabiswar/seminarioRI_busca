import re
import difflib
import unicodedata

def normalize(text):
    text = text.lower()
    text = unicodedata.normalize('NFKD', text).encode('ASCII', 'ignore').decode('utf-8')
    text = re.sub(r'[^\w\s]', '', text)
    return text

# Teste
textos = ["Olá, mundo!", "Café com Leite", "Python é incrível!"]
[normalize(t) for t in textos]


def busca_simples(query, base):
    query_norm = normalize(query)
    return [item for item in base if query_norm in normalize(item)]

# Base de dados de exemplo
produtos = [
    "Café Preto", "Chá Verde", "Café com Leite", "Suco de Laranja", "Água Mineral"
]

# Testes
busca_simples("cafe", produtos)
busca_simples("leite", produtos)
busca_simples("agua", produtos)


def busca_similar(query, base, n=3, cutoff=0.6):
    return difflib.get_close_matches(query, base, n=n, cutoff=cutoff)

# Testes
busca_similar("cafe com leite", produtos)
busca_similar("cha", produtos)
busca_similar("suco laranja", produtos)

def busca_regex(query, base):
    pattern = re.compile(query, re.IGNORECASE)
    return [item for item in base if re.search(pattern, item)]

# Testes
busca_regex("café|suco", produtos)
busca_regex("^C.*e$", produtos)  # começa com C e termina com e


##  Exercício 1: Implemente uma busca que ignore acentuação e retorne resultados aproximados (utilize tanto normalize quanto difflib)

def busca_aprimorada(query, base):
    norm_base = [normalize(item) for item in base]
    norm_query = normalize(query)
    correspondencias = difflib.get_close_matches(norm_query, norm_base, n=3, cutoff=0.6)
    # Mapear de volta para os itens originais
    return [base[norm_base.index(m)] for m in correspondencias]

# Teste
busca_aprimorada("cafe leite", produtos)

# Exercício 2: Crie uma nova base de dados com nomes de cidades brasileiras e implemente: Busca exata com normalização, Busca aproximada, Busca por regex (por exemplo: cidades que começam com “S”)

cidades = ["São Paulo", "Salvador", "Santos", "Santa Catarina", "Rio de Janeiro", "Curitiba", "Brasília", "Belo Horizonte"]

# Implementação
print(busca_simples("sao", cidades))
print(busca_aprimorada("santos", cidades))
print(busca_regex("^S", cidades))  # Começam com S












